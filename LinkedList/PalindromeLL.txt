PALINDROME LINKEDLIST
Send Feedback
You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not.
 Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First and the only line of each test case or query contains the the elements of the singly linked list separated by a single space.
 Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
 Output format :
For each test case, the only line of output that print 'true' if the list is Palindrome or 'false' otherwise.
 Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Time Limit: 1sec

Where 'M' is the size of the singly linked list.
Sample Input 1 :
1
9 2 3 3 2 9 -1
Sample Output 1 :
true
Sample Input 2 :
2
0 2 3 2 5 -1
-1
Sample Output 2 :
false
true
Explanation for the Sample Input 2 :
For the first query, it is pretty intuitive that the the given list is not a palindrome, hence the output is 'false'.

For the second query, the list is empty. An empty list is always a palindrome , hence the output is 'true'.

-----------------------------------------------------------------------------------------------------------------------------------------------------

/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

/*
	Here we first find out the length of the ll. Then we iterate over to the potential middle 
    of the ll. from head to the middle is one ll, and other half we pass over to get reversed.
    then we check each value of both the lls. In case of total size be even, both the ll will
    be seperated equally and if odd, one will be having 1 more element, if any of both lls
    is iterated over, then we return true, otherwise if any data mismatches, we return false.
    :-)
*/

int len(Node* head){
    if(head==NULL){
        return 0;
    }
    int smallAns=len(head->next);
    return smallAns+1;
}

Node* reverse(Node* head){
    Node* i=head;
    Node* temp=head->next;
    i->next=NULL; // 3->n
    Node* j=temp; // 2->9->n
    while(temp!=NULL){
        temp=temp->next; // n
        j->next=i; // 2->3->n ,9->2 --- 9->2->3->n
        i=j; // 9
        j=temp; // n
    }
    return i;
}

bool isPalindrome(Node *head) // 9 2 3 3 2 9
{
    //Write your code 
    if(head==NULL || head->next==NULL){
        return true;
    }
    int length=len(head); // 6
    int mid=length/2; // 3
    int count=1; // 4
    Node* temp1=head; // 3
    Node* temp2=NULL; // 3
    while(count<=mid){
        temp2=temp1;
        temp1=temp1->next;
        count++;
    }
    Node* h2=temp1; // 3 2 9 n
    temp2->next=NULL; // 9 2 3 n 
    h2=reverse(h2); // 9 2 3 n
    temp1=head; // 9 2 3 n
    temp2=h2; // 9 2 3 n
    while(temp1!=NULL && temp2!=NULL){
        if(temp1->data!=temp2->data){
            return false;
        }
        temp1=temp1->next;
        temp2=temp2->next;
    }
    return true;
}