RUNNING MEDIAN
Send Feedback
You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer 'N', denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.
Output Format :
Print the running median for every integer added to the running list in one line (space-separated).
Input Constraints
0 <= N <= 10 ^ 5
1 <= ARR[i] <= 10 ^ 5

Time Limit: 1 sec
Sample Input 1 :
6
6 2 1 3 7 5
Sample Output 1 :
6 4 2 2 3 4
Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4
Sample Input 2 :
5
5 4 3 2 1
Sample Output 2 :
5 4 4 3 3

----------------------------------------------------------------------------------------------------------------------------------------------

#include <queue>

void findMedian(int *arr, int n)
{
    // Write your code here
    
    /* 
    Here we take 2 PQs- one max and one min pq, such that the greater of one and the smaller from one will help us in finding
     the median. Whenever the size of one priority queue will surpass the other by 2, then we will pop from the greater one
     and put it into other pq. The top of each pq will provide us the answer with. If the total size of both pq be odd, then 
     then the top element of greater size is our median, otherwise the mean of both the tops.
     
     5 4 3 2 1 =>  (1 2 3) || (4 5)
     
     insert       max-heap          min-heap        median
     5               5                                 5
     4               5                 5               4
                    /----Toggle To other heap as size is more than 2---
                   4
                   
                   4
    */
    priority_queue<int> pq1;
    priority_queue<int,vector<int>,greater<int>> pq2;
    int i=0;
    while(i<n){
        if(i==0){
            pq1.push(arr[i]);
            cout << arr[i] << " ";
        }else{
            if(arr[i]<pq1.top()){
                pq1.push(arr[i]);
                if(pq1.size()-pq2.size()>=2){
                    pq2.push(pq1.top());
                    pq1.pop();
                }
            }else{
                pq2.push(arr[i]);
                if(pq2.size()-pq1.size()>=2){
                    pq1.push(pq2.top());
                    pq2.pop();
                }
            }
            if((pq1.size()+pq2.size())%2==0){
                cout << (pq1.top()+pq2.top())/2 << " ";
            }else{
                if(pq1.size()>pq2.size()){
                    cout << pq1.top() << " ";
                }else{
                    cout << pq2.top() << " ";
                }
            }
        }
        i++;
    }
}