1567. MAXIMUM LENGTH OF SUBARRAY WITH POSITIVE PRODUCT
Medium

626

8

Add to List

Share
Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
Example 4:

Input: nums = [-1,2]
Output: 1
Example 5:

Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
    Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any    zero.If the subarray has even number of negative numbers, the whole subarray has positive product.
    Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray.
*/

class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int n=nums.size(),negCount=0,posNeg=-1,posZero=-1,maxLen=0; // negCount for counting the negative
        // numbers,posNeg will hold the first occurence of the first negative number,
        // posZero will be the position of the first zero occuring, as we have then to reset all the values
        // to initial, as from zero as new subarray to start.
        for(int i=0;i<n;i++){
            if(nums[i]<0){
                negCount++;
                if(posNeg==-1)
                    posNeg=i;
            }
            if(nums[i]==0){
                negCount=0;
                posNeg=-1;
                posZero=i;
            }
            else{
                if(negCount%2==0) // only if the number of negative numbers, are even, we then consider it
                    // into our answer, otherwise we look for eliminating the first occurence of negative
                    // number. and make it into even.
                    maxLen=max(maxLen,i-posZero);
                else
                    maxLen=max(maxLen,i-posNeg);
            }
        }
        return maxLen;
    }
};