740. DELETE AND EARN
Medium

2239

162

Add to List

Share
You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

 

Example 1:

Input: nums = [3,4,2]
Output: 6
Explanation: You can perform the following operations:
- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].
- Delete 2 to earn 2 points. nums = [].
You earn a total of 6 points.
Example 2:

Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: You can perform the following operations:
- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].
- Delete a 3 again to earn 3 points. nums = [3].
- Delete a 3 once more to earn 3 points. nums = [].
You earn a total of 9 points.

~O(N)~
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        vector<int> dp(10002,0);
        /*
        Here we are considering each number in nums as a bucket, which if we take we cannot take it's adjacent buckets and if we do not take we got
        to take the optimum output of previous either taking or leaving it's adjacent backside.
        ex- 1 1 2 3 3 4
        |   |  |   |  |   |  |   |
        | 1 |  |   |  | 3 |  |   |
        |_1_|  |_2_|  |_3_|  |_4_|
        */
        for(int num:nums)
            dp[num]+=num; // filling up the buckets with the same values in one container.
        int take=0,leave=0;
        for(int i=0;i<10002;i++){
            int takei=leave+dp[i]; // when taking the ith bucket, leaving it's one below bucket and taking it.
            int leavei=max(take,leave); // when not taking the ith bucket, it means we got to make our answer as one of the max out of 
            // take and leave for the previous buckets.
            take=takei; // at last initialize the take with the updated value.
            leave=leavei;// initialize the leave with the updated value.
        }
        return max(take,leave); // finally return the maximum out of the two options for the last container.
    }
};