45. JUMP GAME II
Medium

5750

221

Add to List

Share
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000

~O(N)~

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        int reach=0,endi=0,jumps=0; // setting curr maximum reachable index, the maximum endIndex reached by the last jump of maximum reach,
        // and finally the number of jumps.
        for(int i=0;i<n-1;i++){
            reach=max(reach,i+nums[i]); // resetting the maximum value of reach everytime.
            if(i==endi){
                endi=reach; // if i hits the endIndex, last time jumped, then we set the endIndex as the furthest reach from these 
                // previous elements+i.
                jumps++; // and increase the jump by 1, as we are jumping again to the furthest possible distance.
            }
        }
        return jumps;
    }
};