3 CYCLE
Send Feedback
Given a graph with N vertices (numbered from 0 to N-1) and M undirected edges, then count the distinct 3-cycles in the graph. A 3-cycle PQR is a cycle in which (P,Q), (Q,R) and (R,P) are connected by an edge.
Input Format :
The first line of input contains two space separated integers, that denotes the value of N and M.
Each of the following M lines contain two integers, that denote the vertices which have an undirected edge between them. Let us denote the two vertices with the symbol u and v. 
Output Format :
Print the count the number of 3-cycles in the given graph
Constraints :
0 <= N <= 100
0 <= M <= (N*(N-1))/2
0 <= u <= N - 1
0 <= v <= N - 1
Time Limit: 1 sec
Sample Input 1:
3 3
0 1
1 2
2 0
Sample Output 1:
1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

int isTriangle(int** edges,int n){
    int count=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i==j)
                continue;
            if(edges[i][j]==1){
                for(int k=0;k<n;k++){
                    if(k==i || k==j)
                        continue;
                    if(edges[j][k]==1 && edges[k][i]==1)
                        count++;
                }
            }
        }
    }
    return count/6; // if we see, for every node in cycle, each 2 nodes is scanned twice and count gets increased by 2
    // for every node in cycle, so that means total of 6 times in one cycle, so according to the no. of cycles, cycle/6
    // would give us the right amount of cycles.
}

int main() {
    // Write your code here
    int n,e;
    cin >> n >> e;
    if(n==0 || e==0){
        cout << 0 << endl;
        return 0;
    }
    int** edges=new int*[n];
    for(int i=0;i<n;i++){
    	edges[i]=new int[n];
        for(int j=0;j<n;j++)
            edges[i][j]=0;
    }
    for(int i=0;i<e;i++){
        int e1,e2;
        cin >> e1 >> e2;
        edges[e1][e2]=1;
        edges[e2][e1]=1;
    }
    cout << isTriangle(edges,n) << endl;
}