CONNECTING DOTS
Send Feedback
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. 
Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter.
Output Format :
Print true if there is a cycle in the board, else print false.
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// LESS OPTIMIZED METHOD, HIGH O(RUNTIME).

bool helper(vector<vector<char>> &board, int n, int m,int i,int j,int si,int sj,vector<vector<int>> &visited,int count){
    if(i==si && j==sj && count>=4) // if at any moment we hit our origin index, we just return true, also if only 
        // our count is also greater than equal to 4.
        return true;
    if(i>=n || j>=m || i<0 || j<0 || board[i][j]!=board[si][sj] || visited[i][j]==1)
        return false;
    visited[i][j]=1;
    bool ans=false;
    ans=helper(board,n,m,i-1,j,si,sj,visited,count+1);
    if(ans)
        return true;
    ans=helper(board,n,m,i+1,j,si,sj,visited,count+1);
    if(ans)
        return true;
    ans=helper(board,n,m,i,j-1,si,sj,visited,count+1);
    if(ans)
        return true;
    ans=helper(board,n,m,i,j+1,si,sj,visited,count+1);
    if(ans)
        return true;
    visited[i][j]=0;
    return ans;
}

bool hasCycle(vector<vector<char>> &board, int n, int m) {
    // Write your code here.
    vector<vector<int>> visited(n,vector<int>(m,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(visited[i][j]==0){
                bool ans=helper(board,n,m,i,j,i,j,visited,0);
                if(ans)
                    return true;
            }
        }
    }
    return false;
}

// BETTER METHOD BELOW->
// USING X-AXIS AND Y-AXIS ARRAYS.
void helper(vector<vector<char>> &board,char need, int n, int m,int i,int j,int si,int sj,vector<vector<int>> &visited,bool &isCycle){
    if(i>=n || j>=m || i<0 || j<0)
        return;
    if(need!=board[i][j])
        return;
    if(visited[i][j]){
        isCycle=true;
        return;
    }
    visited[i][j]=1;
    int xd[4]={1,-1,0,0};
    int yd[4]={0,0,1,-1};
    for(int k=0;k<4;k++){
        int nexti=xd[k]+i;
        int nextj=yd[k]+j;
        if(nexti==si && nextj==sj)
            continue;
        helper(board,need,n,m,nexti,nextj,i,j,visited,isCycle);
    }
}

bool hasCycle(vector<vector<char>> &board, int n, int m) {
    // Write your code here.
    vector<vector<int>> visited(n,vector<int>(m,0));
    bool isCycle=false;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!visited[i][j]){
                helper(board,board[i][j],n,m,i,j,-1,-1,visited,isCycle);
                if(isCycle)
                    break;
            }
        }
        if(isCycle)
            break;
    }
    return isCycle;
}