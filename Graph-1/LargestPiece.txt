LARGEST PIECE
Send Feedback
It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

int helper(vector<vector<int>> &cake,int n,int i,int j){
    /*
    	Here we are using the cake array itself as visited reference, each one we will set to zero, after taking it's value,
        in count. And looking for adjacent 1s, if there are no adjacent 1s for a particular index, we just simply will return
        from further iterating by increasing count by zero of previous value.
    */
    if(cake[i][j]==0){
        return 0;
    }
    
    cake[i][j]=0;
    int count=0;
    if(j+1 < n )
        count+=helper(cake,n,i,j+1);
    if(j-1 >= 0 )
        count+=helper(cake,n,i,j-1);
    if(i+1 < n )
        count+=helper(cake,n,i+1,j);
    if(i-1 >= 0 )
        count+=helper(cake,n,i-1,j);
    return count+1;
}

int getBiggestPieceSize(vector<vector<int>> &cake, int n) {
    int maxCount=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(cake[i][j]==1){
                maxCount=max(maxCount,helper(cake,n,i,j));
            }
        }
    }
    return maxCount;
}