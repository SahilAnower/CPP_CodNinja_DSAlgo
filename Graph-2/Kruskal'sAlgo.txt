CODE : KRUSKAL'S ALGORITHM
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5

-------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <algorithm>
using namespace std;

class Edge{
    public:
    	int e1;
    	int e2; // First defining our class edge with two connected edges, and the weight between them
    	int weight;
};

int parent(int a,int* visit){
    if(visit[a]==a)
        return a;
    return visit[a]=parent(visit[a],visit); // here we are setting and checking the parent of a node in the parent array
}

bool compareInterval(Edge ed1,Edge ed2){
    return (ed1.weight<ed2.weight);  // for sorting the array in the increasing order of weights.
}

int main() {
    // Write your code here
    int n,e;
    cin >> n >> e;
    Edge* arr=new Edge[e];
    for(int i=0;i<e;i++){
        Edge edge;
    	cin >> edge.e1;
        cin >> edge.e2;
        cin >> edge.weight;
        arr[i]=edge;
    }
    stable_sort(arr,arr+e,compareInterval);
    // for(int i=0;i<e;i++){
    //     cout << arr[i].weight << endl;
    // }
    Edge* output=new Edge[n-1];
    int* visit=new int[n];
    for(int i=0;i<n;i++)
        visit[i]=i;
    int count=0;
    int i=0;
    while(count!=n-1){ // untill count is not equal to the number of vertices-1, as MST property is to satisfied.
            int p1=parent(arr[i].e1,visit);
            int p2=parent(arr[i].e2,visit);
            if(p1==p2){
                i++; // if both parents are same, we simply increase through edges array, without including it as our
                // answer as it is a cycle.
             	continue;
            }
            else{
                output[count]=arr[i];
                count++;
                i++;
                visit[p1]=p2;
            }
    }
    for(int j=0;j<n-1;j++){
        if(output[j].e1 < output[j].e2)
            cout << output[j].e1 << " " << output[j].e2 << " " << output[j].weight; // we print it from lower index vertex
        // to higher index vertex.
        else if(output[j].e1 > output[j].e2)
            cout << output[j].e2 << " " << output[j].e1 << " " << output[j].weight;
        if(j!=n-2)
        	cout << endl;
    }
}