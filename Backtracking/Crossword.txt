CROSSWORD PROBLEM
Send Feedback
Coding Ninjas has provided you a crossword of 10*10 grid. The grid contains '+' or '-' as its cell values. Now, you are also provided with a word list that needs to placed accurately in the grid. Cells marked with '-' are to be filled with word list.
For example, The following is an example for the input crossword grid and the word list.
+-++++++++
+-++-+++++
+-------++
+-++-+++++
+-++-+++++
+-++-+++++
++++-+++++
++++-+++++
++++++++++
----------
CALIFORNIA;NIGERIA;CANADA;TELAVIV
Output for the given input should be:
+C++++++++
+A++T+++++
+NIGERIA++
+A++L+++++
+D++A+++++
+A++V+++++
++++I+++++
++++V+++++
++++++++++
CALIFORNIA
Note: We have provided such test cases that there is only one solution for the given input.
Input format:
The first 10 lines of input contain crossword. Each of 10 lines has a character array of size 10. Input characters are either '+' or '-'.
The next line of input contains the word list, in which each word is separated by ';'. 
Output format:
Print the crossword grid, after placing the words of word list in '-' cells.  
Constraints
The number of words in the word list lie in the range of: [1,6]
The length of words in the word list lie in the range: [1, 10]
Time Limit: 1 second
Sample Input 1:
+-++++++++
+-++-+++++
+-------++
+-++-+++++
+-++-+++++
+-++-+++++
++++-+++++
++++-+++++
++++++++++
----------
CALIFORNIA;NIGERIA;CANADA;TELAVIV
Sample Output 1:
+C++++++++
+A++T+++++
+NIGERIA++
+A++L+++++
+D++A+++++
+A++V+++++
++++I+++++
++++V+++++
++++++++++
CALIFORNIA

-------------------------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

bool isValidVertical(vector<string> &input,string word,int i,int j){
    if(i+word.size()-1 >= 10) // Checking whether we can put current string vertically from this i and j.
        return false;
    int p=0;
    for(int k=i;k<(i+word.size());k++,p++){
        if(input[k][j]=='-' || input[k][j]==word[p])
            continue;
        else
            return false;
    }
    return true;
}

bool isValidHorizontal(vector<string> &input,string word,int i,int j){
    if(j+word.size()-1 >= 10) // // Checking whether we can put current string horizontally from this i and j.
        return false;
    int p=0;
    for(int k=j;k<(j+word.size());k++,p++){
        if(input[i][k]=='-' || input[i][k]==word[p])
            continue;
        else
            return false;
    }
    return true;
}

void setVertical(vector<string> &input,string word,int i,int j,vector<bool> &temp){
    int p=0;
    for(int k=i;k<(i+word.size());k++,p++){ // setting vertically string and a temporary array for storing the changed state, to reset it after iteration.
        if(input[k][j]=='-'){
            input[k][j]=word[p];
            temp[p]=true;
        }
        else
            temp[p]=false;
    }
}

void setHorizontal(vector<string> &input,string word,int i,int j,vector<bool> &temp){
    int p=0;
    for(int k=j;k<(j+word.size());k++,p++){
        if(input[i][k]=='-'){
            input[i][k]=word[p];
            temp[p]=true;
        }
        else
            temp[p]=false;
    }
}

void resetVertical(vector<string> &input,string word,int i,int j,vector<bool> &temp){
    int p=0;
    for(int k=i;k<(i+word.size());k++,p++){
        if(temp[p]==true){
            input[k][j]='-';
        }
        else
            continue;
    }
}

void resetHorizontal(vector<string> &input,string word,int i,int j,vector<bool> &temp){
    int p=0;
    for(int k=j;k<(j+word.size());k++,p++){
        if(temp[p]==true){
            input[i][k]='-';
        }
        else
            continue;
    }
}

void puzzleSolve(vector<string> &words,vector<string> &input,int index){
    if(index==words.size()){
        // if(flag==true){
        	for(int i=0;i<10;i++){
            	for(int j=0;j<10;j++){
                	cout << input[i][j];
            	}
            	cout << endl;
        	}
        // }
        // flag=false;
        return;
    }
    string currword=words[index];
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(input[i][j]=='-' || input[i][j]==currword[0]){
                if(isValidVertical(input,currword,i,j)){
                    vector<bool> temp(currword.size(),false);
                    setVertical(input,currword,i,j,temp);
                    puzzleSolve(words,input,index+1);
                    resetVertical(input,currword,i,j,temp);
                }
                if(isValidHorizontal(input,currword,i,j)){
                    vector<bool> temp(currword.size(),false);
                    setHorizontal(input,currword,i,j,temp);
                    puzzleSolve(words,input,index+1);
                    resetHorizontal(input,currword,i,j,temp);
                }
            }
        }
    }
}

int main(){
    
    // write your code here
    vector<string> input(10);
    for(int i=0;i<10;i++){
        cin >> input[i];
    }
    string word;
    cin >> word;
    vector<string> words;
    string str="";
    for(int i=0;i<word.size();i++){
        if(word[i]==';'){
            words.push_back(str);
            str="";
        }else{
            str+=word[i];
        }
    }
    words.push_back(str);
    puzzleSolve(words,input,0);
    return 0;
}