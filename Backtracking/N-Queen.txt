N-QUEEN PROBLEM
Send Feedback
You are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.
Note: Don't print anything if there isn't any valid configuration.
Input Format:
The first line of input contains an integer, that denotes the value of N.     
Output Format :
In the output, you have to print every board configuration in a new line. Every configuration will have N*N board elements printed row wise and are separated by space. The cells where queens are safe and placed, are denoted by value 1 and remaining all cells are denoted by value 0. Please refer to sample test cases for more clarity.
Constraints :
1 <= N <= 10
Time Limit: 1 second
Sample Input 1:
4
Sample Output 1 :
0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 
Explanation:
The first and second configuration are shown in the image below. Here, 1 denotes the placement of a queen and 0 denotes an empty cell. Please note that in both the configurations, no pair of queens can kill each other. 

----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

void print(int** board,int n){ // printing the final board here with the queens kept as ones in the 2d matrix.
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout << board[i][j] << " ";
        }
    }
    cout << endl;
}

bool isSafe(int** board,int n,int row,int col){
    int up=row-1;
    int down=row+1;
    while(up>=0){
        if(board[up][col]==1) // checking whether it is being attacked by other queen from above it or not.
            return false;
        up-=1;
    }
    up=row-1;
    down=col-1;
    while(up>=0 && down>=0){ // chjecking whether it is being attacked by other through '\'.
        if(board[up][down]==1)
            return false;
        up-=1;
        down-=1;
    }
    up=row-1;
    down=col+1;
    while(up>=0 && down < n){
        if(board[up][down]==1) // // chjecking whether it is being attacked by other through '/'.
            return false;
        up-=1;
        down+=1;
    }
    return true;
}

void printQueen(int** &board,int n,int row){
	if(row==n){
        print(board,n); // if we have reached the end of all the rows, then that means we have found one answer.
        return;
    }
    for(int i=0;i<n;i++){
        if(isSafe(board,n,row,i)){ // checking if the curr position is safe for keeping the queen.
            board[row][i]=1;
            printQueen(board,n,row+1);
        }
        board[row][i]=0; // either it results in a answer or not, we make the curr position as 0, to furhter look for more
        // answers.
    }
}

int main(){
    // write your code here
    int n;
    cin >> n;
    int** board=new int*[n];
    for(int i=0;i<n;i++){
        board[i]=new int[n];
        for(int j=0;j<n;j++)
            board[i][j]=0;
    }
    printQueen(board,n,0);
    return 0;
}