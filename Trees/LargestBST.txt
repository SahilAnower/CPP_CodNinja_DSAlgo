LARGEST BST
Send Feedback
Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
Output format:
The first and only line of output contains the height of the largest BST.
Constraints:
Time Limit: 1 second
Sample Input 1:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1:
2

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public: 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this->data = data;
        	left = NULL;
        	right = NULL;
    	}
	};
	
***********************************************************/

#define INT_MAX +2147483647;
#define INT_MIN -2147483648;

class Lbst{
  public:
    int mi;
    int ma;
    int height;
    bool isBST;
};

Lbst helper(BinaryTreeNode<int> *root){
    if(root==NULL){
        Lbst ans;
        ans.mi=INT_MAX;
        ans.ma=INT_MIN;
        ans.height=0;
        ans.isBST=true;
        return ans;
    }
    Lbst left=helper(root->left);
    Lbst right=helper(root->right);
    Lbst ans;
    if(root->data<left.ma || root->data>right.mi) // if root's data is less than left's max value or if root's data is 
        // greater than right's minimum value,then we know that from current node, largest BST isn't possible.
        ans.isBST=false;
    else if(left.isBST && right.isBST)
        ans.isBST=true;
    ans.mi=min(min(left.mi,root->data),right.mi); // settting the minimum of all values for future use.
    ans.ma=max(max(left.ma,root->data),right.ma);
    if(ans.isBST)
        ans.height=1+max(left.height,right.height); // if isBSt is true, we add 1 to the largest height of the tree so far formed.
    else
        ans.height=max(left.height,right.height);
    return ans;
}

int largestBSTSubtree(BinaryTreeNode<int> *root) {
    // Write your code here
    Lbst ans=helper(root);
    return ans.height;
}