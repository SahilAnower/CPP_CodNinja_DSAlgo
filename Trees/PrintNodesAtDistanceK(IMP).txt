PRINT NODES AT DISTANCE K FROM NODE
Send Feedback
You are given a Binary Tree of type integer, a target node, and an integer value K.
Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter.
Example:
For a given input tree(refer to the image below):
1. Target Node: 5
2. K = 2
alt txt

Starting from the target node 5, the nodes at distance K are 7 4 and 1.
Input Format:
The first line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

The second line of input contains two integers separated by a single space, representing the value of the target node and K, respectively.
Output Format:
All the node data at distance K from the target node will be printed on a new line.

The order in which the data is printed doesn't matter.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
3 1
Sample Output 1:
9
6
Sample Input 2:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
3 3
Sample Output 2:
4
5

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**********************************************************

        Following is the Binary Tree Node class structure

        template <typename T>
        class BinaryTreeNode {
        public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
                this -> data = data;
                left = NULL;
                right = NULL;
        }
        };

***********************************************************/

void printAll(BinaryTreeNode<int> *root,int k){
    if(root==NULL)
        return;
    if(k==0){
        cout << root->data << "\n";
        return;
    }
    printAll(root->left,k-1);
    printAll(root->right,k-1);
}

int printNodes(BinaryTreeNode<int> *root, int node, int k){
    if(root==NULL)
        return -1; // if root not found, we return -1 from that side.
    if(root->data==node){
        printAll(root,k); // if current root is node, then first we print all nodes at distance at k below it.
        return 0;
    }
    int ld=printNodes(root->left,node,k); // we look for the node at the left subtree.
    if(ld!=-1){
        if((ld+1)==k) // if ld is found, i.e. it will be zero first time then we increase it by 1, and check for 
            // it is equal to k or not. if it is then we print root.
            cout << root->data << "\n";
        else
            printAll(root->right,k-(ld+1)-1); // otherwise we look for the difference distance in the right subtree.
    }
    if(ld==-1){
        int rd=printNodes(root->right,node,k);
        if(rd!=-1){
            if((rd+1)==k)
                cout << root->data << "\n";
            else
                printAll(root->left,k-(rd+1)-1);
        }
    }
}

void nodesAtDistanceK(BinaryTreeNode<int> *root, int node, int k) {
    // Write your code herez
    printNodes(root,node,k);
}
